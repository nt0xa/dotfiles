# Plugins {{{ #

typeset -A ZINIT
ZINIT_HOME="$XDG_DATA_HOME/zsh/zinit"
ZINIT[HOME_DIR]="$ZINIT_HOME"
ZINIT[ZCOMPDUMP_PATH]="$XDG_CACHE_HOME/zsh/zcompdump"

if [[ ! -d $ZINIT_HOME ]]; then
  git clone https://github.com/zdharma/zinit.git $ZINIT_HOME/bin
fi
source "$ZINIT_HOME/bin/zinit.zsh"

zinit lucid wait'1' atload'_history_substring_key_bindings' for \
  zsh-users/zsh-history-substring-search

zinit lucid wait'1' atload'_zsh_autosuggest_start' for \
  zsh-users/zsh-autosuggestions

zinit lucid wait for \
  zsh-users/zsh-syntax-highlighting

zinit lucid wait atload"ZINIT[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" blockf for \
  zsh-users/zsh-completions

zinit lucid pick"theme.zsh" for \
  russtone/prompt-russtone

# }}} Plugins #

# Completions {{{ #

zmodload zsh/complist

setopt AUTO_MENU
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END

# Case insensetive completion
zstyle ':completion:*' matcher-list \
  'm:{[:lower:]}={[:upper:]}'\
  'm:{[:upper:]}={[:lower:]}'

# Use cache
zstyle ':completion::complete:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"

# Use menu if more than one result
zstyle ':completion:*:*:*:*:*' menu select

# Format of group name
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'

# Colors in completion menu
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# }}} Completions #

# History {{{ #

export HISTFILE="$XDG_DATA_HOME/zsh/history"

# Variables
HISTSIZE=100000
SAVEHIST=100000

# Options
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_VERIFY
setopt INC_APPEND_HISTORY

# }}} History #

# Key bindings {{{ #

# Wrapped with function to make async loading possible.
function _history_substring_key_bindings {
  bindkey '^p' history-substring-search-up
  bindkey '^n' history-substring-search-down
}

bindkey '^u' backward-kill-line
bindkey '^t' kill-line

bindkey '^f' vi-forward-char
bindkey '^b' vi-backward-char

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

bindkey '^d' delete-char-or-list

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Fix backspace after mode switching
bindkey -v '^?' backward-delete-char

# Edit current command in nvim with Ctrl-R
autoload edit-command-line
zle -N edit-command-line
bindkey '^g' edit-command-line

# }}} Key bindings #

# Aliases {{{ #

alias v='nvim'
alias p='python3'
alias pp='ptpython'

function kali {
  if [ ! "$(docker ps -q -f name=kali)" ]; then
    docker run -i -t \
      --rm \
      --name kali \
      -v $PWD:/docker \
      -w /docker \
      -p 445:445 \
      -p 1337:1337 \
      ghcr.io/russtone/kali:main
  else
    docker exec -t -i kali zsh
  fi
}

# }}} Aliases #

# Dircolors {{{ #

if (( $+commands[gdircolors] )); then
  dircolors_cmd='gdircolors'
elif (( $+commands[dircolors] )); then
  dircolors_cmd='dircolors'
fi

if [[ ! -z $dircolors_cmd ]]; then
  eval "$($dircolors_cmd --sh "$XDG_CONFIG_HOME/dircolors/dircolors")"
fi

if (( $+commands[gls] )); then
  ls_cmd='gls'
else
  ls_cmd='ls'
fi

alias ls="$ls_cmd --color=auto --group-directories-first"

# }}} Dircolors #

# Cursor {{{ #

# Change cursor shape for different vi modes.
function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]]; then
        echo -ne '\e[1 q'
    else
        echo -ne '\e[5 q'
    fi
}
zle -N zle-keymap-select

function zle-line-init {
    # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    zle -K viins
    echo -ne '\e[5 q'
}
zle -N zle-line-init

# Use beam shape cursor on startup.
echo -ne '\e[5 q'

# Use beam shape cursor for each new prompt.
function preexec {
    echo -ne '\e[5 q'
}

# }}} #
