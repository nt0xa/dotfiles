# Prompt {{{ #

eval "$(starship init zsh)"

# }}} Prompt #

# Plugins {{{ #

typeset -A ZI
ZI_HOME="$XDG_DATA_HOME/zsh/zi"
ZI[HOME_DIR]="$ZI_HOME"
ZI[ZCOMPDUMP_PATH]="$XDG_CACHE_HOME/zsh/zcompdump"

if [[ ! -d $ZI_HOME ]]; then
  git clone https://github.com/z-shell/zi $ZI_HOME
fi
source "$ZI_HOME/zi.zsh"

zi lucid wait'1' atload'_history_substring_key_bindings' for \
  zsh-users/zsh-history-substring-search

zi lucid wait'1' atload'_zsh_autosuggest_start' for \
  zsh-users/zsh-autosuggestions

zi lucid wait for \
  zsh-users/zsh-syntax-highlighting

zi lucid wait atload"ZI[COMPINIT_OPTS]=-C; zicompinit; zicdreplay" blockf for \
  zsh-users/zsh-completions

zinit lucid has'docker' for \
  as'completion' is-snippet \
  https://github.com/docker/cli/blob/master/contrib/completion/zsh/_docker

zinit load atuinsh/atuin

# }}} Plugins #

# Completions {{{ #

zmodload zsh/complist

# Show menu instead of just completion
setopt AUTO_MENU
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END

# Case insensetive completion
zstyle ':completion:*' matcher-list \
  'm:{[:lower:]}={[:upper:]}'\
  'm:{[:upper:]}={[:lower:]}'

# Use cache
zstyle ':completion::complete:*' use-cache on
zstyle ':completion:*' cache-path "$XDG_CACHE_HOME/zsh/zcompcache"

## Use menu if more than one result
zstyle ':completion:*:*:*:*:*' menu select

## Format of group name
zstyle ':completion:*' format ' %F{yellow}-- %d --%f'

# Colors in completion menu
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# }}} Completions #

# History {{{ #

export HISTFILE="$XDG_DATA_HOME/zsh/history"

# Variables
HISTSIZE=100000
SAVEHIST=100000

# Options
setopt SHARE_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_SAVE_NO_DUPS
setopt HIST_VERIFY
setopt INC_APPEND_HISTORY

# }}} History #

# Key bindings {{{ #

# Wrapped with function to make async loading possible.
function _history_substring_key_bindings {
  bindkey '^p' history-substring-search-up
  bindkey '^n' history-substring-search-down
}

bindkey '^u' backward-kill-line
bindkey '^t' kill-line

bindkey '^f' vi-forward-char
bindkey '^b' vi-backward-char

bindkey '^a' beginning-of-line
bindkey '^e' end-of-line

bindkey '^d' delete-char-or-list

# Use vim keys in tab complete menu:
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history

# Fix backspace after mode switching
bindkey -v '^?' backward-delete-char

# Edit current command in nvim with Ctrl-R
autoload edit-command-line
zle -N edit-command-line
bindkey '^g' edit-command-line

# }}} Key bindings #

# Aliases & Functions {{{ #

alias v='nvim'
alias today="date '+%Y-%m-%d'"
alias now="date '+%Y-%m-%d_%H-%M'"
alias uuid="uuidgen | tr '[A-Z]' '[a-z]'"

if (( $+commands[eza] )); then
  alias ls='eza --group-directories-first'
  alias ll='eza --group-directories-first -l'
  alias tree='eza --group-directories-first --tree'
fi

if (( $+commands[bat] )); then
  alias cat='bat'
fi

if (( $+commands[jq] )); then
  alias jwt="jq -R 'split(\".\") | .[1] | @base64d | fromjson | if .exp then (.expStr = (.exp|todate)) else . end'"
fi

if (( $+commands[php] )); then
  urldecode() {
    php -R 'echo urldecode($argn)."\n";'
  }

  urlencode() {
    php -R 'echo urlencode($argn)."\n";'
  }
fi

if (( $+commands[python3] )); then
  hex() {
    python3 -c 'import sys;import codecs;h=codecs.getencoder("hex");hex=h(sys.stdin.read().rstrip().encode());print(hex[0].decode())'
  }

  unhex() {
    python3 -c 'import sys;import codecs;h=codecs.getdecoder("hex");hex=h(sys.stdin.read().rstrip().encode());print(hex[0].decode())'
  }
fi

# macOS
alias flushdns="sudo dscacheutil -flushcache; sudo killall -HUP mDNSResponder"

listening() {
	printf '[*] Listening ports\n\n' >&2

	sudo netstat -anvp tcp|grep LISTEN | while read -r line; do
		port=`echo $line | awk '{print $4}' | awk -F '.' '{print $NF}'`	
		pid=`echo $line | awk '{print  $9}'`
		exe=`sudo ps -o comm -p $pid | grep -v COMM`
		exe=`which $exe`
		
		printf "$exe\t$port\n"
	done
}


# }}} Aliases & Functions #

# Cursor {{{ #

# Change cursor shape for different vi modes.
function zle-keymap-select {
    if [[ ${KEYMAP} == vicmd ]]; then
        echo -ne '\e[1 q'
    else
        echo -ne '\e[5 q'
    fi
}
zle -N zle-keymap-select

function zle-line-init {
    # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    zle -K viins
    echo -ne '\e[5 q'
}
zle -N zle-line-init

# Use beam shape cursor on startup.
echo -ne '\e[5 q'

# Use beam shape cursor for each new prompt.
function preexec {
    echo -ne '\e[5 q'
}

# }}} #

